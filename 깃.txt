Git이란
분산버전관리시스템(형상관리, 버전관리)

여러 개발자가 하나의 소프트웨어 개발할때 소스코드를 관리하는데 사용된다.
깃을 사용할줄 모른다면 게임 개발할때 혼자서 모든 개발을 감당해야 하거나
개발자들끼리 서로 압축 파일로 프로젝트를 옮겨야하는데 사실상 불가능하다고 생각된다.

또한 깃과 유니티를 사용할 줄 아는 팀장 혹은 기획자가 있다면 매우 효율적으로 개발자들을 서포팅 할 수 있게된다.

Git의 장점
소스 코드를 주고 받을 필요 없이, 같은 파일을 여러 개발자가 동시에 개발이 가능하다.
소스 코드의 분기(브랜치)를 나눠 개발한 뒤, 원격 저장소에서 합치는 방식(Merge)으로 개발할 수 있다.
인터넷이 없어도 버전 관리가 되기 때문에 혼자서 개발할 때도 효율적으로 파일 관리를 할 수 있다.

Git vs Github
깃은 로컬(개발자의 컴퓨터)에서 파일의 변경사항을 추적하고 작업된 파일들을 합치고 업로드 할 수 있게 해주는
시스템(프로그램) 혹은 명령어이다.(다 같은말임)
github는 깃을 사용하는 프로젝트를 효율적으로 공유하기 위한 웹 서비스이다.(구글 드라이브 같은거임)

그래서 Git이 뭔데

일단 깃을 알기 전에 기본적으로 알아야 하는 용어부터 짚고 넘어가겠다.

Repository 레포지토리,리포지토리,레포,저장소/ 깃이 추적하고 있는 폴더 그 자체를 의미한다. 
깃은 이 폴더의 변경사항(commit)과 분기(branch),합치기(merge)등을 지원하고 이 변경사항들에 대한 히스토리를 확인할 수 있게 해준다.
로컬에 있는 건 저장소, github에 올라가있는건 원격 저장소라고 구분 지으며 보통 "레포 만들었어요" 하는 그 레포는 깃허브에 올라가있는 원격 저장소를 의미한다.

Commit 커밋 
작업을 끝마치고 프로젝트에 변경된 사항을 확정하고 싶을때 커밋을 한다. 
이때 커밋한 작업에 관한 내용을 간단히 기록하는데 이것을 커밋 메시지라고 한다.
커밋 메시지는 개발자들끼리 알아보기 쉽게 약속을 하는데 이것은 따로 검색해보는걸 추천한다.(필자도 잘 모른다.)

Branch 브랜치, 분기
작업을 하다가 도중에 실험적인 기능을 만들어보고 싶을때가 있다. 
그때 작업하던 내용을 그대로 복사하여(실제로 복사되는건 아니다.) 다른 곳에서 작업을 할 수 있다.(내 파일에 평행우주가 생긴다고 생각하면 편할지도 모르겠다.)
이게 바로 브랜치다. 이 작업물이 마음에 든다면 원본 브랜치에 합칠(merge) 수 있다. 마음에 들지 않는다면 그대로 둔체 원본 브랜치로 돌아가도 좋다.
여러 개발자가 작업할때는 필수 사항이다. 프로그래머의 협업은 자기 브랜치에서 작업한뒤 원본에 합치는(merge) 행동의 반복이다.

Merge 머지, 합치기
아까부터 계속나온 Merge다. 다른 브랜치에서 지금 브랜치로 합치는 것이다.
원격 저장소에 반영된 변경사항을 내 브랜치에 합치고 싶을 때라던지, 다른 브랜치에서 실험적으로 만든 기능이 마음에 들어 원본 레포지토리에 합치고 싶을때 등등
다른 Branch의 변경사항을 현재 Branch로 가져와 합칠 수 있다.
다시한번 말하지만 "변경사항"만 합친다. 
간혹 협업할때 기존의 파일 시스템을 생각하여 파일이 "덮어쓰기"되는게 아니냐 라고 생각하는 개발자들이 있었다.
머지는 그런 개념이 아니다. 현재 브랜치에서 내가 작업한 내용은 그대로 둔채 다른 개발자들이 작업한 내용을 그대로 파일에 합쳐진다.

간혹 작업을 하다보면 변경사항들끼리 충돌이 생길 수 있다. 충돌이 생긴다면 해당 변경사항을 적용한 개발자와 상의하여 충돌을 해결 하면 된다.

pull, push 당겨오기 밀기
이제 깃과 깃허브의 연동이라고 할 수 있다.
pull은 당겨오기 즉 원격 저장소에서 내 컴퓨터로 변경사항을 가져오는거다.
내가 작업 중인 브랜치에서 원격 저장소의 브랜치의 변경사항이 자동으로 합쳐진다.(merge)
이때 충돌이 났다면 충돌 해결 후 작업해야한다.(작업 시작시 pull을 받고 시작하는게 마음 편하다.)

push는 밀기 즉 내 컴퓨터의 변경사항을 원격저장소에 합치겠다는거다.
이것은 반대로 선택한 원격 저장소의 브랜치에서 변경사항이 합쳐진다.(merge)
이때도 깃허브에서 충돌이 났다는 알림을 줄 수도 있다. 
깃허브 내에서 해결이 가능 하지만 굉장히 불편하기 때문에 push하기전엔 미리 pull을 받아서 내 변경사항을 항상 최신으로 만들어 두어야 한다.

staged 
변경사항이 Staging Area에 반영된 상태이다. 커밋은 stage된 변경사항만 확정시킨다.

git의 기본적인 용어에 대해 알아보았다.

이제 깃에 대해 본격적으로 알아보자. git은 소스트리나 깃허브 데스크탑 등 그래픽 인터페이스를 지원하는 툴도 있지만 
실제 사용은 CLI(커맨드 라인 인터페이스)를 사용하는게 158배 정도 편하다고 생각한다.
GUI툴을 알아서 찾아보기로 하고 CLI 명령어에 대해 알아보겠다.

git init : 깃 저장소를 초기화(생성)한다. 일반 폴더를 리포지토리로 바꿔준다고 생각하면 된다.
git clone : 원격 저장소를 그대로 내 컴퓨터로 복사해온다.
git add : 변경사항을 Staging Area에 반영한다. 커밋을 하기 위해선 먼저 해줘야하는 명령어이다.
git status : 저장소 상태를 체크한다. 변경사항이 있는지,스테이지에 있는지, 현재 저장소의 어떤 브랜치에서 작업하고 있는지 등을 볼 수 있다.
git commit : 변경사항을 확정하는 명령어다. 커밋 메시지 입력하는 옵션 -m과 함께 사용한다.
    ex) git commit -m “Commit Message”

git fetch 원격 저장소에 있는 변경사항을 가져온다.
    다른 브랜치에 커밋된 변경사항들을 가져옵니다. 작업중인 브랜치에 합치진 않는다.

git pull : 원격 저장소에서 내 컴퓨터로 변경사항을 합친다. 현재 작업중인 브랜치에 합친다.
    git pull [원격저장소 이름] [브랜치이름]으로 원하는 원격 저장소와 브랜치를 선택할 수 있다.
[원격 저장소 이름] : ex : branch 이름이 develop_moon이라고 했을 때 => git pull origin(원격저장소이름) main으로 해야합니다.
    pull은 fetch + merge라고 생각해도 될 것 같다.
    ex) git pull origin master
git push : 내 컴퓨터에서 원격 저장소로 변경사항을 합친다. 현재 작업중인 브랜치에서 push한다.
    git push [원격저장소 이름] [브랜치이름 : 자기브론치 이름]
    ex) git push origin master
    
git branch 새로운 브랜치를 만든다.
    ex) git branch [브랜치이름]
git branch -r 원격 브랜치를 확인한다.

git checkout 해당 브랜치로 이동한다.
    ex) git checkout [브랜치 이름]
git merge 현재 브랜치에 다른 브랜치의 변경사항을 합친다.
    ex git merge [다른 브랜치]

git log : 커밋 내역 확인.
git help 도움말



그래서 협업은 어떻게 하는데?

git clone [repo_url]
git branch [브랜치이름]
git checkout [브랜치이름]
깃허브에서 같은 이름의 [브랜치이름] branch 생성

-----------------------------------------------------
작업 시작 시
git pull origin [원격 브랜치]// 원격 브랜치로부터 로컬에 merge함.
작업

git add.

git commit -m "커밋메시지"

git pull origin [원격 브랜치] //원본 레포지토리로 부터 로컬에 merge함.

git push origin [브랜치이름]

깃허브에서 pull request and merge
